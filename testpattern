#!/home/simon/MultiscaleSP/venv/bin/python3
import argparse
from sp import SP
from numpy import zeros

parser = argparse.ArgumentParser()
parser.add_argument("corpus", type=str, help="The name of the corpus to process.")
parser.add_argument("prefix", type=str, help="The prefix tokens.")
parser.add_argument("-w", "--words", type=str, help="A list of space separated words that you would like to investigate.", default="")
parser.add_argument("-v", "--verbose", action="store_true", help="Display verbose output")
args = parser.parse_args()

s = SP(args.corpus)
if args.prefix:
    prefix = args.prefix.split()
elif args.fileprefix:
    prefix = open(args.fileprefix).read().lower().split()
else:
    print ("You must specify a prefix using the -p or -P flags.")
    exit()


i = prefix.index("_")
if i == -1:
    print("Prefix must include an _ to mark the place that you want to generate the probabilities for.")
    exit()

prefix = [s.I[w] if w != "_" else -1 for w in prefix]

cowan = prefix[max(0, i - SP.CowanBufferLength):i]
miller = prefix[max(0, i - SP.MillerBufferLength):i]
honeyhasson = prefix[max(0, i - SP.HoneyHassonBufferLength):i]
kintsch = prefix[max(0, i - SP.KintschBufferLength):i]
if len(prefix) <= i + 2:
    if len(prefix) <= i + 1:
        probs = s.prob(prefix[i-2], prefix[i-1], -1, -1, cowan, miller, honeyhasson, kintsch)
    else:
        probs = s.prob(prefix[i-2], prefix[i-1], prefix[i+1], -1, cowan, miller, honeyhasson, kintsch)
else:
    probs = s.prob(prefix[i-2], prefix[i-1], prefix[i+1], prefix[i+2], cowan, miller, honeyhasson, kintsch)


if args.words == "":
    print(s.strVec(probs))
    print (s.strNets(cowan, miller, honeyhasson, kintsch))
else:
    words = [s.I[w] for w in args.words.split() if w in s.vocab]
    missingwords = [w for w in args.words.split() if w not in s.vocab]
    if missingwords != []:
        print ("The following words are not in the vocab: ", missingwords)
    print(s.strVec(s.select(words, probs), NoZeros=True))
    print (s.trace(words, cowan, miller, honeyhasson, kintsch))


